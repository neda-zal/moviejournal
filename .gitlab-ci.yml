image:                          node:latest

include:
  - template:                   Code-Quality.gitlab-ci.yml
  - template:                   Dependency-Scanning.gitlab-ci.yml

stages:
  - npm
  - test
  - deploy

default:
    before_script:
        - echo "Starting job..."
    after_script:
        - echo "Job executed successfully"

npm:
    stage:                      npm
    script:
        - npm config set registry ${CI_NPM_REGISTRY}
        - npm install
    cache:
        paths:
            - node_modules/
    artifacts:
        expire_in:              1 hour
        when:                   on_success
        paths:
            - node_modules/

test_db:
    stage:                      test
    when:                       on_success
    dependencies:
        - npm
    script:
        - node ./models/user.js

test:
    stage:                      test
    when:                       on_success
    dependencies:
        - npm
    script:
        - npx nyc --reporter cobertura mocha
    artifacts:
      reports:
         cobertura:             coverage/cobertura-coverage.xml

code_quality:
  stage:                        test
  needs:                        []
  variables:
    CODE_QUALITY_IMAGE:         "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.18"
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality:              gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in:                  1 week

.sast:
  stage:                        test
  needs:                        []
  artifacts:
    paths:
      - gl-sast-report.json
    reports:
      sast:                     gl-sast-report.json
    expire_in:                  1 week
  variables:
    DOCKER_TLS_CERTDIR:         ""
    SAST_ANALYZER_IMAGE_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
    SAST_ANALYZER_IMAGE_TAG:    2
    SAST_BRAKEMAN_LEVEL:        2
    SAST_EXCLUDED_PATHS:        qa,spec,doc,ee/spec,config/gitlab.yml.example
    SAST_DISABLE_BABEL:         "true"
  script:
    - /analyzer run

brakeman-sast:
  extends:                      .sast
  image:
    name:                       "$SAST_ANALYZER_IMAGE_PREFIX/brakeman:$SAST_ANALYZER_IMAGE_TAG"

eslint-sast:
  extends:                      .sast
  image:
    name:                       "$SAST_ANALYZER_IMAGE_PREFIX/eslint:$SAST_ANALYZER_IMAGE_TAG"

nodejs-scan-sast:
  extends:                      .sast
  image:
    name:                       "$SAST_ANALYZER_IMAGE_PREFIX/nodejs-scan:$SAST_ANALYZER_IMAGE_TAG"

secrets-sast:
  extends:                      .sast
  image:
    name:                       "$SAST_ANALYZER_IMAGE_PREFIX/secrets:3"
  artifacts:
    paths:
      - gl-secret-detection-report.json
    reports:
      sast:                     gl-secret-detection-report.json
    expire_in:                  1 week

license_scanning:
  stage:                        test
  image:
    name:                       "registry.gitlab.com/gitlab-org/security-products/analyzers/license-finder:3"
    entrypoint:                 [""]
  needs:                        []
  script:
    - /run.sh analyze .
  artifacts:
    reports:
      license_scanning:         gl-license-scanning-report.json
    expire_in:                  1 week
  dependencies:                 []

gemnasium-dependency_scanning:
  variables:
    DS_REMEDIATE:               "false"

trigger_build:
  stage:                        deploy
  script:
    - "curl -X POST -F token=7e868b65456e09d9f2f986f4987922 -F ref=master https://gitlab.com/api/v4/projects/22562690/trigger/pipeline"
